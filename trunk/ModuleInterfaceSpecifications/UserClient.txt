MIS
_______________________________________________________________________________
UserClient.pl (Single program with no modules)
_______________________________________________________________________________
Normal Behaviour
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
This program will connect to a server.  It will then accept command line 
arguments.  This is the only way in which to input data into this program.  
These command line arguments, of which there 
must be 4, must be provided in the following order: 
    1) User name

    2) Password

    3) Name of class to submit project to

    4) Filename (must have .txt file extension)

The command to execute this program with the above parameters in the given
order is:
	perl UserClient.pl <USERNAME><PASSWORD><COURSE><SUBMIT_FILE.txt>

In the command line, this command would appear as follows with the user's data
substituted for that in the example:
	perl UserClient.pl john doe CSCI Unknown.txt

If filename, filename AND class name, filename AND class name AND Password, or 
filename AND class name AND password AND username are not included in the 
invocation of the program on the command line an appropriate error message 
saying which situation has occurred will be output and the program will exit 
with a value of 1.  

If too many command line arguments are provided a message 
saying so will be output and the program will exit with a value of 1.  

The program will then pass name, password, and class name to the server.
If the user's name/password combination or class name are invalid or the 
assignment is late the server passes an error code prompting this program 
(UserClient.pl) to output a message saying so and exit with a value of 1.    

If the program has not exited in the step above and the server has sent back 
both a code indicating a valid class name and username/password combination and 
a code indicating that the assignment was on time it sends the filename
provided by the user to the server.  If the server deems the filename to be 
invalid it passes an appropriate error code to this program (UserClient.pl) 
leading this program to output an appropriate error message and exit with a 
value of 1. 

If the program has not exited and the server has sent back a code indicating
a valid file name the program then sends the number of lines in the file and the 
file to the server.

If the program was able to successfully submit the file provided by the user the
server sends back a success code causing the program (UserClient.pl) to output a 
message indicating successful file transfer and exit with a value of 0.  If the 
program was unsuccesful in submitting the file provided by the user the server 
sends back a file transfer failure code causing the program (UserClient.pl) to 
output an error message indicating file transfer failure and exit with a value 
of 1. 

Exceptions
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Unable to connect to server: an appropriate error message is output and the
program exits.

File provided is unable to be opened: an appropriate error message is output and
the program exits.

Assumptions
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Somewhere a server with appropriate programming is waiting for UserClient to
connect to it (i.e. a server with modules capable of handling the information
passed to it by UserClient)

The server will pass back information which can be interpreted by UserClient
(e.g. the server will pass back between one and three codes from some 
predetermined set of codes; for example, a set could consist of the codes 
"1", "2", "3", "4", "5", "400")

The file being submitted to UserClient exists and can be opened by UserClient

The user is able to enter input into the command line (e.g. user is able to 
input a command perl UserClient.pl username password classname filename into a 
command line in a terminal window)

The user has PERL installed on their computer 

The user has the CPAN library IO::Socket installed on their computer 

The user is running debian LINUX on their computer

The user has a copy of this program      